parameters:
  - name: PushToNuget
    displayName: 'Push packages to NuGet.org'
    type: boolean
    default: true

trigger: none
pr: none

variables:
- name: BuildConfiguration
  value: 'release'
- name: packagesInfoPath
  value: "./PackagesInfo.proj"

pool:
  vmImage: windows-latest

steps:

- powershell: |

   $xml = [Xml] (Get-Content $(packagesInfoPath))
   $version = $xml.Project.PropertyGroup.Version
   $versionChunks = $version.Split(".")[0..2]
   
   $packageVersion = '$versionChunks[0].$versionChunks[1].$versionChunks[2]-build$(Build.BuildNumber)'
   echo "Package version is $packageVersion"

   echo "##vso[task.setvariable variable=majorVersion]$($versionChunks[0])"
   echo "##vso[task.setvariable variable=minorVersion]$($versionChunks[1])"
   echo "##vso[task.setvariable variable=patchVersion]$($versionChunks[2])"
   echo "##vso[task.setvariable variable=packageVersion]$(packageVersion)"
   
  displayName: 'Get packages version'

- task: UseDotNet@2
  displayName: "Use .NET Sdk"
  inputs:
    version: 6.0.x

- task: DotNetCoreCLI@2
  displayName: 'dotnet build and pack'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'packageVersion'
    verbosityPack: 'Minimal'

- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet.org devTrevi'
  enabled: ${{ parameters.PushToNuget }}

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'